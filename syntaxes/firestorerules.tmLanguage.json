{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "firestorerules",
	"scopeName": "source.firebase",
	"patterns": [
		{
			"include": "#firestore-root"
		},
		{
			"include": "#version"
		},
		{
			"include": "#comments"
		}
	],
	"repository": {
		"constants": {
			"patterns": [
				{
					"name": "constant.numeric.firestorerules",
					"match": "\\d+"
				},
				{
					"name": "constant.language.firestorerules",
					"match": "\\b(true|false|write|read|get|list|update|delete|create)\\b"
				}
			]
		},
		"comments": {
			"match": "\/\/.*",
			"name": "comment.line"
		},
		"type-primitive": {
			"name": "support.type.primitive.fs",
			"match": "\\b(bool|bytes|constraint|duration|float|int|latlng|list|number|map|string|timestamp|path|request)\\b"
		},
		"type-builtin-literals": {
			"name": "support.type.builtin.fs",
			"match": "\\b(true|false|null|undefined)\\b"
		},
		"version": {
			"name": "comment.block.documentation.fs",
			"match": "rules_version? =? '\\d'?;"
		},
		"firestore-root": {
			"name": "meta.root.fs",
			"begin": "(service) (cloud)\\.(firestore) {",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.fs"
				},
				"2": {
					"name": "keyword.control.fs"
				},
				"3": {
					"name": "storage.type.class.fs"
				}
			},
			"end": "\\b\\}",
			"patterns": [
				{
					"include": "#matcher"
				}
			]
		},
		"matcher": {
			"name": "meta.matcher.fs",
			"begin": "match",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.fs"
				}
			},
			"end": "\\b\\}",
			"patterns": [
				{
					"include": "#matcher"
				},
				{
					"include": "#matcher-path"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#allow-statement"
				},
				{
					"include": "#comments"
				}
			]
		},
		"matcher-path": {
			"name": "string.unquoted.fs",
			"begin": "(?<=match) \\/",
			"end": "(?= \\{$)",
			"patterns": [
				{
					"include": "#matcher-param"
				}
			]
		},
		"matcher-param": {
			"name": "variable.parameter.fs",
			"begin": "\\{\\s*",
			"end": "\\}"
		},
		"function-declaration": {
			"name": "meta.function.fs",
			"begin": "(function)\\s+(\\w+)\\s?(\\()([^)]*)(\\))\\s+\\{",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.fs"
				},
				"2": {
					"name": "support.function.fs"
				},
				"3": {
					"name": "punctuation.definition.parameters.fs"
				},
				"4": {
					"name": "variable.parameter.function.fs"
				},
				"5": {
					"name": "punctuation.definition.parameters.fs"
				}
			},
			"end": "(?<!\\w)\\}",
			"patterns": [
				{
					"include": "#function-expression"
				}
			]
		},
		"function-expression": {
			"name": "meta.function.expression.fs",
			"begin": "return",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.return.fs"
				}
			},
			"end": "(?=\\})",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#expression"
				}
			]
		},
		"allow-statement": {
			"name": "meta.allow.fs",
			"begin": "(allow)\\s((write|read|get|list|update|delete|create)(\\s*,\\s*(write|read|get|list|update|delete|create))*)\\s*\\:",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.fs"
				},
				"2": {
					"name": "support.type.builtin.fs"
				}
			},
			"end": "\\;|(?=allow)|(?=match)|\\}",
			"patterns": [
				{
					"include": "#if-statement"
				},
				{
					"include": "#expression"
				}
			]
		},
		"if-statement": {
			"name": "keyword.control.fs",
			"match": "if"
		},
		"function-call": {
			"name": "meta.functioncall.fs",
			"begin": "(\\w+)\\(",
			"beginCaptures": {
				"1": {
					"name": "support.function.fs"
				}
			},
			"end": "\\)",
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#identifiers"
				},
				{
					"name": "variable.parameter.functioncall.fs",
					"match": "(?<=[\\(,])\\s*(\\w|\\.)+\\s*(?=[\\),])"
				}
			]
		},
		"operators": {
			"name": "keyword.operator.firestorerules",
			"match": "(==|!=|&&|is|\\|{2}|<=|>=|<|>|!)"
		},
		"strings": {
			"patterns": [
				{
					"include": "#strings-quoted"
				},
				{
					"name": "string.unquoted.firestorerules",
					"match": "\\/\\w((\\w|\\/)*)(?=\\W)",
					"patterns": [
						{
							"name": "constant.character.escape.firestorerules",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"strings-quoted": {
			"name": "string.quoted.firestorerules",
			"begin": "\\\"|'",
			"end": "\\\"|'",
			"patterns": [
				{
					"name": "constant.character.escape.firestorerules",
					"match": "\\\\."
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#paren-expression"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#type-primitive"
				},
				{
					"include": "#type-builtin-literals"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#strings"
				}
			]
		},
		"paren-expression": {
			"paren-expression": {
				"begin": "\\(",
				"beginCaptures": {
					"0": {
						"name": "meta.brace.round.fs"
					}
				},
				"end": "\\)",
				"endCaptures": {
					"0": {
						"name": "meta.brace.round.fs"
					}
				},
				"patterns": [
					{
						"include": "#expression"
					}
				]
			}
		},
		"identifiers": {
			"patterns": [
				{
					"name": "variable.parameter.fs",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				}
			]
		}
	}
}