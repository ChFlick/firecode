rules_version = '2';
function rootFunction() {
   return true;
}
service cloud.firestore {
   function serviceFunction() {
      return true;
   }
   match /databases/{database}/documents {
      function hasValue(value, uid, carId) {
         let someValue = true || request.resource.data.size() == 2;
         return get(/databases/$(database)/documents/someData/$(uid)/subCollection/$(carId)).data.someData.hasAll([value])
      }
      
      match /someData/{targetUserId} {
         allow write: if false;
         allow read: if request.auth.uid == targetUserId 
         match /subCollection/{carId} {
            allow read: if hasValue('bla', request.auth.uid, carId);
            allow update: if false; // Some comment
            // another comment
         }
      }
      
      match /users/{userId} {
         allow write, read: if false;
      }
      
      match /cars/{carId} {
         match /roles/{roleId} {
            allow delete: if get(/databases/$(database)/documents/configurations/someData).data.values.hasAll(request.resource.data.someData)
               && request.resource.data.keys().hasOnly(['name', 'someData'])
               && request.resource.data.size() == 2
               && request.resource.data.name is string
               && request.resource.data.someData is list
               && hasValue('bla', request.auth.uid, carId);
            
            allow read: if hasValue('bla', request.auth.uid, carId);
         }
         
         match /oneLevel/{one} {
            match /twoLevel/{two} {
               match /threeLevel/{three} {
                  allow write, read: if request.resource.data.asdf is int &&
                  request.resource.data.asdf is 333;
               }
            }
         }
         
         match /store/current/{doc=**} {
            allow read: if request.auth.uid != null;
            
            match /slots/{slotId} {
               allow write: if hasValue('writeSLots', request.auth.uid, carId)
                  && request.resource.data.keys().hasOnly(['rank', 'name', 'description', 'imageUrl', 'timeSlot'])
                  && request.resource.data.rank is int
                  && request.resource.data.name is string
                  && request.resource.data.description is string
                  && request.resource.data.imageUrl is string path
                  && request.resource.data.timeSlot.from is timestamp
                  && request.resource.data.timeSlot.to is timestamp
                  && request.resource.data.timeSlot.to > request.resource.data.timeSlot.from;
            }
         }
      }
   }
}